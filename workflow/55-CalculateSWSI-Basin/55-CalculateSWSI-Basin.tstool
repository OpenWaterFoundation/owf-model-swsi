# Create a log file to help with troubleshooting.
StartLog(LogFile="55-CalculateSWSI-Basin.tstool.log")
#
# Perform all SWSI computations for large (e.g., Arkansas, not HUC8) river basins:
# - produce results for Current SWSI Summary - Basin Summary
# - produce basin graphs for full analysis period
# - produce basin time series and SWSI summary workbooks
#
# Clean up files before running:
# - remove files created by this processing step to avoid old results from being propagated forward if this step fails
# - also create output folders to avoid warnings
# RemoveFile(InputFile="../Results-Web/swsi-summary/SWSI-Current-Summary-Basin.html",IfNotFound=Ignore)
CreateFolder(Folder="../Results-Web/graphs-tsp/ALL-BASIN",CreateParentFolders="True",IfFolderExists="Ignore")
CreateFolder(Folder="../Results-Web/graphs-png/ALL-BASIN",CreateParentFolders="True",IfFolderExists="Ignore")
CreateFolder(Folder="../Results-Web/swsi-by-basin",CreateParentFolders="True",IfFolderExists="Ignore")
#
# Read controlling properties.
ReadPropertiesFromExcel(InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Config",PropertyCellMap="NumberOfBasins:*,CurrentMonthDateText:*,CurrentMonth:*,CurrentMonthText:*,PreviousMonthDateText:*,PreviousYearMonthDateText:*,CurrentWaterYearStartDateText:*,CurrentWaterYearStartDateDecimalText:*,CurrentPeriodAnnotationDecimalText:*")
ReadPropertiesFromExcel(InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Config",PropertyCellMap="CurrentWaterYearEndDateText:*,HistoricalPeriodStartDateText:*,HistoricalPeriodEndDateText:*,HistoricalPeriodEndDateDecimalText:*")
ReadPropertiesFromExcel(InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Config",PropertyCellMap="HistoricalPeriodAnnotationDecimalText:*,RecentPeriodStartDateText:*,RecentPeriodEndDateText:*,RecentPeriodAnnotationDecimalText:*,RecentPeriodGraphStartDateText:*")
ReadPropertiesFromExcel(InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Config",PropertyCellMap="RecentPeriodGraphEndDateText:*")
#
# Read SWSI component data by station.
ReadDateValue(InputFile="..\Input-TimeSeries-ForSWSI\ReservoirStorage\SWSI-Component-ReservoirStorage.dv")
ReadDateValue(InputFile="..\Input-TimeSeries-ForSWSI\PrevMoStreamflow\SWSI-Component-PrevMoStreamflow.dv")
ReadDateValue(InputFile="..\Input-TimeSeries-ForSWSI\ForecastedRunoff\SWSI-Component-ForecastedRunoff.dv")
#
# Read combined inputs with Basin-station assignments.
ReadTableFromExcel(TableID="Combined Inputs",InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Combined Inputs",ExcelColumnNames="FirstRowInRange",ColumnExcludeFilters="SWSI Basin:",Comment="NO")
CopyTable(TableID="Combined Inputs",NewTableID="Basin Inputs",ColumnFilters="Basinwide Analysis:YES")
#
# Read month properties table with month ids and abbreviations.
ReadTableFromExcel(TableID="Month Properties",InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Lookup Tables",ExcelNamedRange="Month_Table",ExcelColumnNames="FirstRowInRange",ReadAllAsText="True")
#
# Create list of unique Basins for looping.
# CopyTable(TableID="Combined Inputs",NewTableID="BasinList_Unique",IncludeColumns="SWSI Basin",DistinctColumns="SWSI Basin",ColumnFilters="SWSI Basin:South Platte",RowCountProperty="BasinCount")
CopyTable(TableID="Combined Inputs",NewTableID="BasinList_Unique",IncludeColumns="SWSI Basin",DistinctColumns="SWSI Basin",RowCountProperty="BasinCount")
#
# Check that number of basins matched expected number.
If(Name="CheckBasinCount",Condition="${BasinCount}!=${NumberOfBasins}")
    Message(Message="ERROR - ${BasinCount} basins found but ${NumberOfBasins} expected. Check basin names in control file.",CommandStatus="FAILURE")
    Exit()
EndIf(Name="CheckBasinCount")
#
# Create the Summary Output Table.
NewTable(TableID="Summary_Output_Table",Columns="Basin,string;Date,datetime;SWSI,double;NEP,double;SWSI_Prev_Mo,double; Chg_SWSI_Prev_Mo,double,SWSI_Prev_Yr,double; Chg_SWSI_Prev_Yr,double")
##################################################################################################################
##################################################################################################################
########## Begin loop on Basins to calculate SWSI and associated outputs ###########################################
##################################################################################################################
##################################################################################################################
For(Name="BasinLoop",IteratorProperty="BasinName",TableID="BasinList_Unique",TableColumn="SWSI Basin")
    #
    # Check if Basin is using observed flow data for the previous month's streamflow component.
    CopyTable(TableID="Basin Inputs",NewTableID="Basin_ObsStations",IncludeColumns="ID",DistinctColumns="ID",ColumnFilters="SWSI Basin:${BasinName}, Data Type:NaturalFlow,Include:YES-OBS",RowCountProperty="NumObsGages")
    If(Name="NumObsGages>0",Condition="${NumObsGages}>0")
        SetProperty(PropertyName="BasinPrevMoFlowFlagAnnotation",PropertyType="String",PropertyValue="Results are computed using observed flow data for the previous month's streamflow component for ${NumObsGages} station(s).")
    EndIf(Name="NumObsGages>0")
    If(Name="NumObsGages=0",Condition="${NumObsGages}==0")
        SetProperty(PropertyName="BasinPrevMoFlowFlagAnnotation",PropertyType="String",PropertyValue=" ")
    EndIf(Name="NumObsGages=0")
    #
    # Create station ID lists by component type.
    CopyTable(TableID="Basin Inputs",NewTableID="Basin_PrevMoStreamflowStations",IncludeColumns="ID",DistinctColumns="ID",ColumnFilters="SWSI Basin:${BasinName},Data Type:NaturalFlow",RowCountProperty="NumPrevMoStreamflowGages")
    CopyTable(TableID="Basin Inputs",NewTableID="Basin_Reservoirs",IncludeColumns="ID",DistinctColumns="ID",ColumnFilters="SWSI Basin:${BasinName}, Data Type:ReservoirStorage",RowCountProperty="NumReservoirs")
    CopyTable(TableID="Basin Inputs",NewTableID="Basin_ForecastedRunoffStations",IncludeColumns="ID",DistinctColumns="ID",ColumnFilters="SWSI Basin:${BasinName}, Data Type:ForecastedNaturalFlow",RowCountProperty="NumForecastedRunoffGages")
    #################################################################
    # Calculate sum of reservoir storage component for Basin.
    #################################################################
    # Create the time series and initialize with 0 values.
    NewTimeSeries(Alias="${BasinName}-Component-ReservoirStorage",NewTSID="${BasinName}.SUM.STORAGE.Month",SetStart="${HistoricalPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",Units="ac_ft",MissingValue="NaN",InitialValue="0")
    # Select reservoir time series.
    DeselectTimeSeries(TSList="AllTS")
    SetProperty(PropertyName="SelectReservoirCount",PropertyType="Integer",PropertyValue="0")
    If(Name="Reservoir>0",Condition="${NumReservoirs}>0")
        For(Name="reservoirLoop",IteratorProperty="reservoirId",TableID="Basin_Reservoirs",TableColumn="ID")
        SelectTimeSeries(TSList="AllMatchingTSID",TSID="${reservoirId}-Component-ReservoirStorage",IfNotFound="Warn",SelectCountProperty="SelectReservoirCount")
        SetTimeSeriesProperty(TSList="AllMatchingTSID",TSID="${reservoirId}-Component-ReservoirStorage",PropertyName="Basin",PropertyType="String",PropertyValue="${BasinName}")
        EndFor(Name="reservoirLoop")
    EndIf(Name="Reservoir>0")
    # Add selected reservoir time series.
    If(Name="Reservoir>0",Condition="${NumReservoirs}>0")
        Add(TSID="${BasinName}-Component-ReservoirStorage",AddTSList="SelectedTS",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
    EndIf(Name="Reservoir>0")
    # Check that the number of reservoirs matched expected number.
    If(Name="CheckReservoirCount",Condition="${NumReservoirs}!=${SelectReservoirCount}")
        Message(Message="ERROR for Basin ${BasinName} - ${SelectReservoirCount} reservoirs found but ${NumReservoirs} expected. FIX!",CommandStatus="FAILURE")
        Exit()
    EndIf(Name="CheckReservoirCount")
    #################################################################
    # Calculate reservoir storage component results for Basin.
    #################################################################
    # Percent of historical average for historical, recent, and current periods using historical period to define historical averages.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ReservoirStorage",Statistic="PercentOfMean",SampleMethod="AllYears",NormalStart="${HistoricalPeriodStartDateText}",NormalEnd="${HistoricalPeriodEndDateText}",Alias="${BasinName}-ReservoirStorage-PctOfAverage")
    # Plotting position, NEP, and SWSI for historical period only.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ReservoirStorage",Statistic="PlottingPosition",Distribution="Gringorten",DistributionParameters="a:.4",SortOrder="LowToHigh",AnalysisStart="${HistoricalPeriodStartDateText}",AnalysisEnd="${HistoricalPeriodEndDateText}",SampleMethod="AllYears",Alias="${BasinName}-ReservoirStorage-PlottingPosition")
    #
    Copy(TSID="${BasinName}-ReservoirStorage-PlottingPosition",NewTSID="${BasinName}.CALC.ReservoirStorage-NEP.Month",Alias="${BasinName}-ReservoirStorage-NEP")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-NEP",ScaleValue="100",NewUnits="PCT")
    #
    Copy(TSID="${BasinName}-ReservoirStorage-PlottingPosition",NewTSID="${BasinName}.CALC.ReservoirStorage-SWSI.Month",Alias="${BasinName}-ReservoirStorage-SWSI")
    AddConstant(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-SWSI",ConstantValue="-.5")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-SWSI",ScaleValue="8.33333",NewUnits="SWSI")
    #################################################################
    # Calculate sum of previous month's streamflow component for Basin.
    #################################################################
    # Create the time series and initialize with 0 values.
    NewTimeSeries(Alias="${BasinName}-Component-PrevMoStreamflow",NewTSID="${BasinName}.SUM.STREAMFLOW.Month",SetStart="${HistoricalPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",Units="ac_ft",MissingValue="NaN",InitialValue="0")
    # Select previous month streamflow time series.
    DeselectTimeSeries(TSList="AllTS")
    SetProperty(PropertyName="SelectPrevMoStreamflowCount",PropertyType="Integer",PropertyValue="0")
    If(Name="PrevMoFlow>0",Condition="${NumPrevMoStreamflowGages}>0")
        For(Name="PrevMoFlowLoop",IteratorProperty="PrevMoFlowId",TableID="Basin_PrevMoStreamflowStations",TableColumn="ID")
            SelectTimeSeries(TSList="AllMatchingTSID",TSID="${PrevMoFlowId}-Component-PrevMoStreamflow",IfNotFound="Warn",SelectCountProperty="SelectPrevMoStreamflowCount")
            SetTimeSeriesProperty(TSList="AllMatchingTSID",TSID="${PrevMoFlowId}-Component-PrevMoStreamflow",PropertyName="Basin",PropertyType="String",PropertyValue="${BasinName}")
        EndFor(Name="PrevMoFlowLoop")
    EndIf(Name="PrevMoFlow>0")
    # Add selected previous month streamflow time series.
    If(Name="PrevMoFlow>0",Condition="${NumPrevMoStreamflowGages}>0")
        Add(TSID="${BasinName}-Component-PrevMoStreamflow",AddTSList="SelectedTS",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
    EndIf(Name="PrevMoFlow>0")
    # Check that number of nat flow gages matched expected number.
    If(Name="CheckPrevMoStreamflowCount",Condition="${NumPrevMoStreamflowGages}!=${SelectPrevMoStreamflowCount}")
        Message(Message="ERROR for Basin ${BasinName} - ${SelectPrevMoStreamflowCount} prev mo streamflow gages found but ${NumPrevMoStreamflowGages} expected. FIX!",CommandStatus="FAILURE")
        Exit()
    EndIf(Name="CheckPrevMoStreamflowCount")
    ##################################################################
    # Calculate previous month's streamflow component results for Basin.
    ##################################################################
    # Percent of historical average for historical, recent, and current periods using historical period to define historical averages.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-PrevMoStreamflow",Statistic="PercentOfMean",SampleMethod="AllYears",NormalStart="${HistoricalPeriodStartDateText}",NormalEnd="${HistoricalPeriodEndDateText}",Alias="${BasinName}-PrevMoStreamflow-PctOfAverage")
    # Plotting position, NEP, and SWSI for historical period only.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-PrevMoStreamflow",Statistic="PlottingPosition",Distribution="Gringorten",DistributionParameters="a:.4",SortOrder="LowToHigh",AnalysisStart="${HistoricalPeriodStartDateText}",AnalysisEnd="${HistoricalPeriodEndDateText}",SampleMethod="AllYears",Alias="${BasinName}-PrevMoStreamflow-PlottingPosition")
    SetConstant(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PlottingPosition",MonthValues="NaN,NaN,NaN,NaN,NaN,NaN,*,*,*,NaN,NaN,NaN")
    #
    Copy(TSID="${BasinName}-PrevMoStreamflow-PlottingPosition",NewTSID="${BasinName}.CALC.PrevMoStreamflow-NEP.Month",Alias="${BasinName}-PrevMoStreamflow-NEP")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-NEP",ScaleValue="100",NewUnits="PCT")
    #
    Copy(TSID="${BasinName}-PrevMoStreamflow-PlottingPosition",NewTSID="${BasinName}.CALC.PrevMoStreamflow-SWSI.Month",Alias="${BasinName}-PrevMoStreamflow-SWSI")
    AddConstant(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-SWSI",ConstantValue="-.5")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-SWSI",ScaleValue="8.33333",NewUnits="SWSI")
    ################################################################
    # Calculate forecasted runoff component for Basin.
    ################################################################
    # Create time series and initialize with 0 values.
    NewTimeSeries(Alias="${BasinName}-Component-ForecastedRunoff",NewTSID="${BasinName}.SUM.FORECAST.Month",SetStart="${HistoricalPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",Units="ac_ft",MissingValue="NaN",InitialValue="0")
    #
    DeselectTimeSeries(TSList="AllTS")
    SetProperty(PropertyName="SelectForecastedRunoffCount",PropertyType="Integer",PropertyValue="0")
    If(Name="ForecastedRunoff>0",Condition="${NumForecastedRunoffGages}>0")
        For(Name="FcstLoop",IteratorProperty="FcstId",TableID="Basin_ForecastedRunoffStations",TableColumn="ID")
            SelectTimeSeries(TSList="AllMatchingTSID",TSID="${FcstId}-Component-ForecastedRunoff",IfNotFound="Warn",SelectCountProperty="SelectForecastedRunoffCount")
            SetTimeSeriesProperty(TSList="AllMatchingTSID",TSID="${FcstId}-Component-ForecastedRunoff",PropertyName="Basin",PropertyType="String",PropertyValue="${BasinName}")
        EndFor(Name="FcstLoop")
    EndIf(Name="ForecastedRunoff>0")
    #
    # Add selected forecast time series.
    If(Name="ForecastedRunoff>0",Condition="${NumForecastedRunoffGages}>0")
        Add(TSID="${BasinName}-Component-ForecastedRunoff",AddTSList="SelectedTS",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
        SetTimeSeriesProperty(TSList="SelectedTS",PropertyName="Basin",PropertyType="String",PropertyValue="${BasinName}")
    EndIf(Name="ForecastedRunoff>0")
    #
    # Check that number of forecast gages matched expected number.
    If(Name="CheckForecastedRunoffCount",Condition="${NumForecastedRunoffGages}!=${SelectForecastedRunoffCount}")
        Message(Message="ERROR for Basin ${BasinName} - ${SelectForecastedRunoffCount} forecast gages found but ${NumForecastedRunoffGages} expected. FIX!",CommandStatus="FAILURE")
        Exit()
    EndIf(Name="CheckForecastedRunoffCount")
    ##################################################################
    # Calculate forecasted runoff component results for Basin.
    ##################################################################
    # Percent of historical average for historical, recent, and current periods using historical period to define historical averages.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ForecastedRunoff",Statistic="PercentOfMean",SampleMethod="AllYears",NormalStart="${HistoricalPeriodStartDateText}",NormalEnd="${HistoricalPeriodEndDateText}",Alias="${BasinName}-ForecastedRunoff-PctOfAverage")
    #
    # Plotting position, NEP, and SWSI for historical period only.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ForecastedRunoff",Statistic="PlottingPosition",Distribution="Gringorten",DistributionParameters="a:.4",SortOrder="LowToHigh",AnalysisStart="${HistoricalPeriodStartDateText}",AnalysisEnd="${HistoricalPeriodEndDateText}",SampleMethod="AllYears",Alias="${BasinName}-ForecastedRunoff-PlottingPosition")
    SetConstant(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PlottingPosition",MonthValues="*,*,*,*,*,*,NaN,NaN,NaN,NaN,NaN,NaN")
    #
    Copy(TSID="${BasinName}-ForecastedRunoff-PlottingPosition",NewTSID="${BasinName}.CALC.ForecastedRunoff-NEP.Month",Alias="${BasinName}-ForecastedRunoff-NEP")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-NEP",ScaleValue="100",NewUnits="PCT")
    #
    Copy(TSID="${BasinName}-ForecastedRunoff-PlottingPosition",NewTSID="${BasinName}.CALC.ForecastedRunoff-SWSI.Month",Alias="${BasinName}-ForecastedRunoff-SWSI")
    AddConstant(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-SWSI",ConstantValue="-.5")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-SWSI",ScaleValue="8.33333",NewUnits="SWSI")
    ################################################################
    # Calculate sum of all components for Basin.
    ################################################################
    DeselectTimeSeries(TSList="AllTS")
    NewTimeSeries(Alias="${BasinName}-DataComposite",NewTSID="${BasinName}.SumComponents.DataComposite.Month",SetStart="${HistoricalPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",Units="ac_ft",MissingValue="NaN",InitialValue="0")
    Add(TSID="${BasinName}-DataComposite",AddTSList="AllMatchingTSID",AddTSID="${BasinName}-Component-ReservoirStorage",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
    Add(TSID="${BasinName}-DataComposite",AddTSList="AllMatchingTSID",AddTSID="${BasinName}-Component-PrevMoStreamflow",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
    Add(TSID="${BasinName}-DataComposite",AddTSList="AllMatchingTSID",AddTSID="${BasinName}-Component-ForecastedRunoff",HandleMissingHow="SetMissingIfAnyMissing",IfTSListToAddIsEmpty="Warn")
    ##################################################################
    # Calculate composite component results for Basin.
    ##################################################################
    # Percent of historical average for historical, recent, and current periods using historical period to define historical averages.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite",Statistic="PercentOfMean",SampleMethod="AllYears",NormalStart="${HistoricalPeriodStartDateText}",NormalEnd="${HistoricalPeriodEndDateText}",Alias="${BasinName}-DataComposite-PctOfAverage")
    #
    # Plotting position, NEP, and SWSI for historical period only.
    RunningStatisticTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite",Statistic="PlottingPosition",Distribution="Gringorten",DistributionParameters="a:.4",SortOrder="LowToHigh",AnalysisStart="${HistoricalPeriodStartDateText}",AnalysisEnd="${HistoricalPeriodEndDateText}",SampleMethod="AllYears",Alias="${BasinName}-DataComposite-PlottingPosition")
    #
    Copy(TSID="${BasinName}-DataComposite-PlottingPosition",NewTSID="${BasinName}.CALC.DataComposite-NEP.Month",Alias="${BasinName}-DataComposite-NEP")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-NEP",ScaleValue="100",NewUnits="PCT")
    #
    Copy(TSID="${BasinName}-DataComposite-PlottingPosition",NewTSID="${BasinName}.CALC.DataComposite-SWSI.Month",Alias="${BasinName}-DataComposite-SWSI")
    AddConstant(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",ConstantValue="-.5")
    Scale(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",ScaleValue="8.33333",NewUnits="SWSI")
    SetTimeSeriesProperty(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",PropertyName="BasinName",PropertyType="String",PropertyValue="${BasinName}")
    ########################################################################################
    # Write results to tables for lookup for recent + current periods and for Excel output.
    ########################################################################################
    # Remove old file and create new file.
    RemoveFile(InputFile="../Results-Web/swsi-by-basin/${BasinName}-SWSI.xlsx",IfNotFound="Ignore")
    NewExcelWorkbook(OutputFile="../Results-Web/swsi-by-basin/${BasinName}-SWSI.xlsx",Worksheets="OCT,NOV,DEC,JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP",KeepOpen="True")
    #
    ##################################################################################################################
    ##################################################################################################################
    ########## Begin nested loop on months ###########################################################################
    ##################################################################################################################
    ##################################################################################################################
    #
    # Within the month loop, the analysis window parameters are used to limit processing to a single month.
    For(Name="MonthLoop",IteratorProperty="MonthId",TableID="Month Properties",TableColumn="MonthId")
        SetPropertyFromTable(TableID="Month Properties",Column="MonthAbbrev",ColumnIncludeFilters="MonthId:${MonthId}",PropertyName="MonthAbbrev",DefaultValue="NotWorking!")
        #
        # RemoveFile(InputFile="../Results-Web/swsi-by-basin/${BasinName}-${MonthAbbrev}-SWSI.html",IfNotFound=Ignore)
        #
        # The first TimeSeriesToTable command creates the table, the following ones use the same table.
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Create")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-PctOfAverage",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-PlottingPosition",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-PlottingPosition",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-NEP",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-SWSI",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ReservoirStorage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-PctOfAverage",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-PlottingPosition",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-PlottingPosition",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-NEP",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-SWSI",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-PrevMoStreamflow",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-PctOfAverage",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PlottingPosition",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-PlottingPosition",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-NEP",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-SWSI",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ForecastedRunoff",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-PctOfAverage",OutputPrecision="0",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PlottingPosition",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-PlottingPosition",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-NEP",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-SWSI",OutputPrecision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${HistoricalPeriodEndDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        ########################################################################################
        # Calculate SWSI values for recent + current periods.
        ########################################################################################
        # NEP
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-DataComposite",OutputTSID="${BasinName}-DataComposite-NEP",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="DataComposite",SortInput="True",TableValue2Column="DataComposite-NEP",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-ReservoirStorage",OutputTSID="${BasinName}-ReservoirStorage-NEP",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="ReservoirStorage",SortInput="True",TableValue2Column="ReservoirStorage-NEP",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-PrevMoStreamflow",OutputTSID="${BasinName}-PrevMoStreamflow-NEP",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="PrevMoStreamflow",SortInput="True",TableValue2Column="PrevMoStreamflow-NEP",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-ForecastedRunoff",OutputTSID="${BasinName}-ForecastedRunoff-NEP",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="ForecastedRunoff",SortInput="True",TableValue2Column="ForecastedRunoff-NEP",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        # SWSI
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-DataComposite",OutputTSID="${BasinName}-DataComposite-SWSI",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="DataComposite",SortInput="True",TableValue2Column="DataComposite-SWSI",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-ReservoirStorage",OutputTSID="${BasinName}-ReservoirStorage-SWSI",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="ReservoirStorage",SortInput="True",TableValue2Column="ReservoirStorage-SWSI",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-PrevMoStreamflow",OutputTSID="${BasinName}-PrevMoStreamflow-SWSI",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="PrevMoStreamflow",SortInput="True",TableValue2Column="PrevMoStreamflow-SWSI",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        SetTimeSeriesValuesFromLookupTable(InputTSID="${BasinName}-Component-ForecastedRunoff",OutputTSID="${BasinName}-ForecastedRunoff-SWSI",TableID="${BasinName}-${MonthAbbrev}",TableValue1Column="ForecastedRunoff",SortInput="True",TableValue2Column="ForecastedRunoff-SWSI",LookupMethod="Interpolate",OutOfRangeLookupMethod="UseEndValue",SetStart="${RecentPeriodStartDateText}",SetEnd="${CurrentMonthDateText}",SetWindowStart="${MonthId}",SetWindowEnd="${MonthId}")
        #
        # Append results for recent+current periods to tables.
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-PctOfAverage",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-NEP",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="DataComposite-SWSI",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ReservoirStorage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-PctOfAverage",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-NEP",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ReservoirStorage-SWSI",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-PrevMoStreamflow",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-PctOfAverage",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-NEP",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="PrevMoStreamflow-SWSI",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ForecastedRunoff",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PctOfAverage",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-PctOfAverage",OutputPrecision="0",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-NEP",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-NEP",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-SWSI",TableID="${BasinName}-${MonthAbbrev}",DateTimeColumn="Date",ValueColumn="ForecastedRunoff-SWSI",OutputPrecision="2",OutputStart="${RecentPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputWindowStart="${MonthId}",OutputWindowEnd="${MonthId}",IfTableNotFound="Warn")
        #
        ########################################################################################
        # Output results as tables in Excel and HTML format.
        ########################################################################################
        #
        SortTable(TableID="${BasinName}-${MonthAbbrev}",SortColumns="DataComposite",SortOrder="DataComposite:Descending")
        WriteTableToExcel(TableID="${BasinName}-${MonthAbbrev}",OutputFile="../Results-Web/swsi-by-basin/${BasinName}-SWSI.xlsx",Worksheet="${MonthAbbrev}",ExcelAddress="A1:A1",ExcelColumnNames="FirstRowInRange",KeepOpen="True")
        # WriteTableToHTML(TableID="${BasinName}-${MonthAbbrev}",OutputFile="../Results-Web/swsi-by-basin/${BasinName}-${MonthAbbrev}-SWSI.html")
        #
    EndFor(Name="MonthLoop")
    ##################################################################################################################
    ##################################################################################################################
    ############ End nested loop on months to output results by month ################################################
    ##################################################################################################################
    ##################################################################################################################
    #
    CloseExcelWorkbook(OutputFile="../Results-Web/swsi-by-basin/${BasinName}-SWSI.xlsx")
    ########################################################################################
    # Output results as graphs in png format.
    ########################################################################################
    RemoveFile(InputFile="../Results-Web/graphs-png/ALL-BASIN/Basin-${BasinName}-SWSI-history-graph.png",IfNotFound="Ignore")
    RemoveFile(InputFile="../Results-Web/graphs-tsp/ALL-BASIN/Basin-${BasinName}-SWSI-history-graph.tsp",IfNotFound="Ignore")
    #
    ExpandTemplateFile(InputFile="Basin-SWSI-history-graph-template.tsp",OutputFile="../Results-Web/graphs-tsp/ALL-BASIN/Basin-${BasinName}-SWSI-history-graph.tsp",ListInResults="False")
    ProcessTSProduct(TSProductFile="../Results-Web/graphs-tsp/ALL-BASIN/Basin-${BasinName}-SWSI-history-graph.tsp",View="False",OutputFile="../Results-Web/graphs-png/ALL-BASIN/Basin-${BasinName}-SWSI-history-graph.png",VisibleStart="${HistoricalPeriodStartDateText}",VisibleEnd="${RecentPeriodGraphEndDateText}")
    #
    ########################################################################################
    # Output results as time series in Excel format for Basin.
    ########################################################################################
    RemoveFile(InputFile="../Results-Web/ts/${BasinName}-TimeSeries.dv",IfNotFound="Ignore")
    RemoveFile(InputFile="../Results-Web/ts/${BasinName}-TimeSeries.xlsx",IfNotFound="Ignore")
    NewExcelWorkbook(OutputFile="../Results-Web/ts/${BasinName}-TimeSeries.xlsx",Worksheets="${BasinName}-TimeSeries",KeepOpen="True")
    DeselectTimeSeries(TSList="AllTS")
    #
    # Select reservoir time series.
    If(Name="Reservoir>0",Condition="${NumReservoirs}>0")
        For(Name="selectReservoirLoop",IteratorProperty="reservoirId",TableID="Basin_Reservoirs",TableColumn="ID")
            SelectTimeSeries(TSList="AllMatchingTSID",TSID="${reservoirId}-Component-ReservoirStorage",IfNotFound="Warn")
        EndFor(Name="selectReservoirLoop")
    EndIf(Name="Reservoir>0")
    #
    # Select previous month streamflow time series.
    If(Name="PrevMoFlow>0",Condition="${NumPrevMoStreamflowGages}>0")
        For(Name="selectPrevMoFlowLoop",IteratorProperty="PrevMoFlowId",TableID="Basin_PrevMoStreamflowStations",TableColumn="ID")
            SelectTimeSeries(TSList="AllMatchingTSID",TSID="${PrevMoFlowId}-Component-PrevMoStreamflow",IfNotFound="Warn")
        EndFor(Name="selectPrevMoFlowLoop")
    EndIf(Name="PrevMoFlow>0")
    #
    # Select forecast time series.
    If(Name="ForecastedRunoff>0",Condition="${NumForecastedRunoffGages}>0")
        For(Name="selectFcstLoop",IteratorProperty="FcstId",TableID="Basin_ForecastedRunoffStations",TableColumn="ID")
            SelectTimeSeries(TSList="AllMatchingTSID",TSID="${FcstId}-Component-ForecastedRunoff",IfNotFound="Warn")
        EndFor(Name="selectFcstLoop")
    EndIf(Name="ForecastedRunoff>0")
    #
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ReservoirStorage",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-PctOfAverage",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-PlottingPosition",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-NEP",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ReservoirStorage-SWSI",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-PrevMoStreamflow",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PctOfAverage",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-PlottingPosition",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-NEP",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-PrevMoStreamflow-SWSI",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-Component-ForecastedRunoff",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PctOfAverage",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-PlottingPosition",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-NEP",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-ForecastedRunoff-SWSI",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-PctOfAverage",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-PlottingPosition",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-NEP",IfNotFound="Warn")
    SelectTimeSeries(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",IfNotFound="Warn")
    #
    WriteTimeSeriesToExcel(TSList="SelectedTS",MissingValue="Blank",Precision="2",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}",OutputFile="../Results-Web/ts/${BasinName}-TimeSeries.xlsx",Worksheet="${BasinName}-TimeSeries",ExcelAddress="A1",KeepOpen="False",ValueColumns="%A",ValueComment="${tsdata:flag}",SkipValueCommentIfNoFlag="True")
    WriteDateValue(TSList="SelectedTS",OutputFile="../Results-Web/ts/${BasinName}-TimeSeries.dv",Precision="2",MissingValue="NaN",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}")
    WriteDelimitedFile(TSList="SelectedTS",OutputFile="../Results-Web/ts/${BasinName}-TimeSeries.csv",Precision="2",MissingValue="NaN",OutputStart="${HistoricalPeriodStartDateText}",OutputEnd="${CurrentMonthDateText}")
    #
    ########################################################################################
    # Write results to Current Summary Output table.
    ########################################################################################
    #
    # Create a blank and temporary copy of the output summary table.
    CopyTable(TableID="Summary_Output_Table",NewTableID="Summary_Output_Table_temp",ColumnFilters="Basin:Undefined")
    #
    # Write results to table.
    DeselectTimeSeries(TSList="AllTS")
    TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",TableID="Summary_Output_Table_temp",DateTimeColumn="Date",TableTSIDColumn="Basin",TableTSIDFormat="%L",ValueColumn="SWSI",OutputPrecision="2",OutputStart="${CurrentMonthDateText}",OutputEnd="${CurrentMonthDateText}",IfTableNotFound="Warn")
    TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",TableID="Summary_Output_Table_temp",DateTimeColumn="Date",TableTSIDColumn="Basin",TableTSIDFormat="%L",ValueColumn="SWSI_Prev_Mo",OutputPrecision="2",OutputStart="${PreviousMonthDateText}",OutputEnd="${PreviousMonthDateText}",IfTableNotFound="Warn")
    TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-SWSI",TableID="Summary_Output_Table_temp",DateTimeColumn="Date",TableTSIDColumn="Basin",TableTSIDFormat="%L",ValueColumn="SWSI_Prev_Yr",OutputPrecision="2",OutputStart="${PreviousYearMonthDateText}",OutputEnd="${PreviousYearMonthDateText}",IfTableNotFound="Warn")
    TimeSeriesToTable(TSList="AllMatchingTSID",TSID="${BasinName}-DataComposite-NEP",TableID="Summary_Output_Table_temp",DateTimeColumn="Date",TableTSIDColumn="Basin",TableTSIDFormat="%L",ValueColumn="NEP",OutputPrecision="2",OutputStart="${CurrentMonthDateText}",OutputEnd="${CurrentMonthDateText}",IfTableNotFound="Warn")
    #
    # Append row from temp table to final table and then free the temp table in preparation for next Basin.
    AppendTable(TableID="Summary_Output_Table",AppendTableID="Summary_Output_Table_temp")
    FreeTable(TableID="Summary_Output_Table_temp")
    ########################################################################################
    # Prepare for the next Basin.
    ########################################################################################
    # Deselect all time series before moving to the next Basin.
    DeselectTimeSeries(TSList="AllTS")
    # Free tables before moving to the next Basin.
    FreeTable(TableID="Basin_ObsStations")
    FreeTable(TableID="Basin_PrevMoStreamflowStations")
    FreeTable(TableID="Basin_Reservoirs")
    FreeTable(TableID="Basin_ForecastedRunoffStations")
    # Reset properties before moving to next Basin
    SetProperty(PropertyName="NumObsGages",PropertyType="Integer",PropertyValue="0")
    SetProperty(PropertyName="NumPrevMoStreamflowGages",PropertyType="Integer",PropertyValue="0")
    SetProperty(PropertyName="NumReservoirs",PropertyType="Integer",PropertyValue="0")
    SetProperty(PropertyName="NumForecastedRunoffGages",PropertyType="Integer",PropertyValue="0")
    SetProperty(PropertyName="BasinPrevMoFlowFlagAnnotation",PropertyType="String",PropertyValue=" ")
EndFor(Name="BasinLoop")
##################################################################################
##################################################################################
########## End loop on Basins to calculate SWSI and associated outputs #############
##################################################################################
##################################################################################
#
# Write Summary Output Table:
# - write Excel file to facilitate review
# - write csv for use by software
TableMath(TableID="Summary_Output_Table",Input1="SWSI",Operator="-",Input2="SWSI_Prev_Yr",Output="Chg_SWSI_Prev_Yr")
TableMath(TableID="Summary_Output_Table",Input1="SWSI",Operator="-",Input2="SWSI_Prev_Mo",Output="Chg_SWSI_Prev_Mo")
SortTable(TableID="Summary_Output_Table",SortColumns="Basin",SortOrder="Basin:Ascending")
WriteTableToExcel(TableID="Summary_Output_Table",OutputFile="../Results-Web/swsi-summary/SWSI-Current-Summary.xlsx",Worksheet="Basin Summary",ExcelAddress="A1:A1",ExcelColumnNames="FirstRowInRange",KeepOpen="False",ColumnWidths="Default:Auto")
WriteTableToDelimitedFile(TableID="Summary_Output_Table",OutputFile="../Results-Web/swsi-summary/SWSI-Current-Summary-Basin.csv")
# WriteTableToHTML(TableID="Summary_Output_Table",OutputFile="../Results-Web/swsi-summary/SWSI-Current-Summary-Basin.html")
