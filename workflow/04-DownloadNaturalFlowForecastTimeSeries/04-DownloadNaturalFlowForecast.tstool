# Create a log file to help with troubleshooting.
StartLog(LogFile="04-DownloadNaturalFlowForecast.tstool.log")
#
# Download NRCS 50% exceedance volume forecasts for the unique list of SWSI forecast points:
# - read the table of all forecast station identifiers from HUC_ForecastGage worksheet
# - process to get a unique list of identifiers (some stations may be reused between HUCs)
# - read from the NRCS AWDB web services for those stations:
#   - read the full historical period - will limit processing later
#   - read two sets of tables and combine because different forecast periods are used
#     (e.g., Rio Grande uses forecast through SEP and other basins through JUL)
#
# Clean up files before running:
# - remove files created by this processing step to avoid old results from being propagated forward if this step fails
# - also create the output folder to avoid warnings
RemoveFile(InputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\ForecastedNaturalFlow-Month.dv",IfNotFound=Ignore)
RemoveFile(InputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\ForecastedNaturalFlow-Month.xlsx",IfNotFound=Ignore)
RemoveFile(InputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\NRCS-50PercentForecasts.xlsx",IfNotFound=Ignore)
CreateFolder(Folder="..\Input-TimeSeries-Raw\ForecastedNaturalFlow",CreateParentFolders=True,IfFolderExists=Ignore)
#
# Read forecast station list:
# - only read rows where "Data Type" column is "ForecastedNaturalFlow"
# - skip rows where "Include" column is "NO"
ReadTableFromExcel(TableID="ForecastedNaturalFlowList",InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Combined Inputs",ExcelColumnNames=FirstRowInRange,ColumnIncludeFilters="Data Type:ForecastedNaturalFlow",ColumnExcludeFilters="HUC:",Comment="NO")
# Create a unique list of time series based on the ID column.
CopyTable(TableID="ForecastedNaturalFlowList",NewTableID="ForecastedNaturalFlowListUnique",DistinctColumns="ID",RowCountProperty="ForecastedNaturalFlowListUnique_Count")
#
# Create additional unique lists for the Rio Grande and non-Rio Grande so that forecasts can be processed appropriately.
CopyTable(TableID="ForecastedNaturalFlowListUnique",NewTableID="ForecastedNaturalFlowListUniqueRioGrandeIDs",IncludeColumns="ID",DistinctColumns="ID",ColumnFilters="Forecast Period: Rio Grande")
CopyTable(TableID="ForecastedNaturalFlowListUnique",NewTableID="ForecastedNaturalFlowListUniqueNonRioGrandeIDs",IncludeColumns="ID",DistinctColumns="ID",ColumnExcludeFilters="Forecast Period: Rio Grande")
#
# Form properties with the list of forecast points:
# - a template string is used to create the list
# - this indicates the stations for the ReadNrcsAwdb command
# - create two lists, one for the Rio Grande and one for the rest of the State.
# - this is necessary because Rio Grande forecasts go through SEP and the others through JUL
ExpandTemplateFile(InputText="<#list ForecastedNaturalFlowListUniqueRioGrandeIDs as loc><#if (loc_index > 0)>,</#if>${loc}</#list>",OutputProperty="ForecastedNaturalFlowListUniqueRioGrandeIDs")
ExpandTemplateFile(InputText="<#list ForecastedNaturalFlowListUniqueNonRioGrandeIDs as loc><#if (loc_index > 0)>,</#if>${loc}</#list>",OutputProperty="ForecastedNaturalFlowListUniqueNonRioGrandeIDs")
#
# Read all the historical forecasts:
# - Use the station lists formed above to limit the query
# - Read the full period so that a time series of forecasts can be created
# - Note that forecasts APR-JUL will return forecasts with publication date of Jan 1, Feb 1, etc.
# - After reading forecasts for each forecast period, concatenate into one big table
#
# Process Non-Rio Grande basins.
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueNonRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_APR-JUL",ForecastPeriod="APR-JUL",ForecastExceedanceProbabilities="50",Elements="SRVO")
CopyTable(TableID="NRCS_50PercentForecasts_APR-JUL",NewTableID="NRCS_50PercentForecasts")
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueNonRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_MAY-JUL",ForecastPeriod="MAY-JUL",ForecastExceedanceProbabilities="50",Elements="SRVO")
AppendTable(TableID="NRCS_50PercentForecasts",AppendTableID="NRCS_50PercentForecasts_MAY-JUL")
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueNonRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_JUN-JUL",ForecastPeriod="JUN-JUL",ForecastExceedanceProbabilities="50",Elements="SRVO")
AppendTable(TableID="NRCS_50PercentForecasts",AppendTableID="NRCS_50PercentForecasts_JUN-JUL")
# Process Rio Grande basins.
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_APR-SEP",ForecastPeriod="APR-SEP",ForecastExceedanceProbabilities="50",Elements="SRVO")
AppendTable(TableID="NRCS_50PercentForecasts",AppendTableID="NRCS_50PercentForecasts_APR-SEP")
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_MAY-SEP",ForecastPeriod="MAY-SEP",ForecastExceedanceProbabilities="50",Elements="SRVO")
AppendTable(TableID="NRCS_50PercentForecasts",AppendTableID="NRCS_50PercentForecasts_MAY-SEP")
ReadNrcsAwdb(DataStore="NrcsAwdb",Interval=Month,Stations="${ForecastedNaturalFlowListUniqueRioGrandeIDs}",States="CO",Networks="USGS",ReadForecast=True,ForecastTableID="NRCS_50PercentForecasts_JUN-SEP",ForecastPeriod="JUN-SEP",ForecastExceedanceProbabilities="50",Elements="SRVO")
AppendTable(TableID="NRCS_50PercentForecasts",AppendTableID="NRCS_50PercentForecasts_JUN-SEP")
#
# Create a new column for the forecast that is YYYY-MM:
# - the NRCS publication date is of the form YYYY-MM-DD hh:mm:ss
# - reformat to YYYY-MM to simplify conversion to time series
FormatTableDateTime(TableID="NRCS_50PercentForecasts",InputColumn="PublicationDate",DateTimeFormat="%Y-%m",OutputColumn="PublicationDateToMonth",OutputType=DateTime,InsertBeforeColumn="CalculationDate")
#
# Sort the table to ensure proper conversion to time series because TableToTimeSeries checks
# the start and end of the table to determine dates for the time series period.
SortTable(TableID="NRCS_50PercentForecasts",SortColumns="StationID,PublicationDateToMonth")
#
# Multiply NRCS forecast values by 1000 to get units of ac-ft for SWSI calculations in later steps.
TableMath(TableID="NRCS_50PercentForecasts",Input1="Value",Operator="*",Input2="1000",Output="Value_acft")
InsertTableColumn(TableID="NRCS_50PercentForecasts",InsertColumn="Unit_acft",ColumnType=String,InitialValue="ac_ft")
#
# Write forecast raw data:
# - output CSV file and Excel files
# - always quote strings so that station ID leading zero is properly handled
NewExcelWorkbook(OutputFile="../Input-TimeSeries-Raw/ForecastedNaturalFlow/NRCS-50PercentForecasts.xlsx",Worksheets="NRCS 50Percent Forecasts",KeepOpen=True)
WriteTableToExcel(TableID="NRCS_50PercentForecasts",OutputFile="../Input-TimeSeries-Raw/ForecastedNaturalFlow/NRCS-50PercentForecasts.xlsx",Worksheet="NRCS 50Percent Forecasts",ExcelAddress="A1",ExcelColumnNames=FirstRowInRange,KeepOpen=False,ColumnWidths="Default:Auto",ColumnDecimalPlaces="Value_acft:2")
#
# Convert the forecast table into time series:
# - each station ID will result in a new time series
# - the "PublicationDateToMonth" is used for the date
# - the "Value_acft" is used for the value
TableToTimeSeries(TableID="NRCS_50PercentForecasts",DateTimeColumn="PublicationDateToMonth",LocationColumn="StationID",DataSourceColumn="Network",DataTypeColumn="Element",UnitsColumn="Unit_acft",ValueColumn="Value_acft",Interval=Month,Alias="%L-ForecastedNaturalFlow-Month")
#
# Determine if the forecast time series need to be extended through the current analysis month.
ReadPropertiesFromExcel(InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Config",PropertyCellMap="CurrentMonthText:*,CurrentMonthDateText:*")
ReadTableFromExcel(TableID="Month Properties",InputFile="..\CO-SWSI-Control.xlsx",Worksheet="Lookup Tables",ExcelNamedRange="Month_Table",ExcelColumnNames=FirstRowInRange,ReadAllAsText=True)
SetPropertyFromTable(TableID="Month Properties",Column="ForecastFlag",ColumnIncludeFilters="MonthId:${CurrentMonthText}",PropertyName="ForecastFlag",DefaultValue="Not Working!")
If(Name="ForecastFlag=N",Condition="${ForecastFlag}==N",CompareAsStrings="True")
ChangePeriod(TSList=AllTS,NewEnd="${CurrentMonthDateText}")
EndIf(Name="ForecastFlag=N")
#
# Assign location to stationId property.
SetTimeSeriesPropertiesFromTable(TSList=AllMatchingTSID,TSID="*Month",TableID="ForecastedNaturalFlowListUnique",TableTSIDColumn="ID",TableTSIDFormat="%L",TableInputColumns="ID,Station Name",TSPropertyNames="ID:stationId,Station Name:stationName")
#
# Perform automated data checks.
SelectTimeSeries(TSList=AllMatchingTSID,TSID="*Month",DeselectAllFirst=True,SelectCountProperty="NumTS")
If(Name="NumTS",Condition="${NumTS}!=${ForecastedNaturalFlowListUnique_Count}",CompareAsStrings="False")
Message(Message="${NumTS} time series created but ${ForecastedNaturalFlowListUnique_Count} time series expected.",CommandStatus=WARNING)
EndIf(Name="NumTS")
#
# Write the forecasted time series to a DateValue file for later use.
WriteDateValue(TSList=AllMatchingTSID,TSID="*Month",OutputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\ForecastedNaturalFlow-Month.dv",Precision=0,MissingValue=NaN,IncludeProperties="stationId,stationName")
WriteTimeSeriesToExcel(TSList=AllMatchingTSID,TSID="*Month",MissingValue=Blank,Precision=0,OutputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\ForecastedNaturalFlow-Month.xlsx",Worksheet="ForecastedNaturalFlow",ExcelAddress="A1",KeepOpen=False,ValueColumns="%A (${ts:stationName})")
Exit()
#
# The following commands are useful to read the output files after processing to review specific time series.
# Ignore if the file does not exist so that nuisance warnings are not shown in the production workflow.
ReadDateValue(InputFile="..\Input-TimeSeries-Raw\ForecastedNaturalFlow\ForecastedNaturalFlow-Month.dv",IfNotFound=Ignore)
